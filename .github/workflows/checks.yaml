name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true
  schedule:
    - cron: "0 0 * * 0"

env:
  CARGO_TERM_COLOR: always

permissions: read-all

jobs:
  BuildJob:
    strategy:
      matrix:
        feature: [ "v2", "v3_0", "v3_1" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - run: cargo build --features ${{ matrix.feature }} --no-default-features --verbose
  Build:
    needs: BuildJob
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        if: ${{ needs.BuildJob.result != 'success' }}
        run: exit 1
  Format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - run: cargo fmt --all --check --verbose
  Clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo tools
      - run: cargo clippy --all-features --verbose -- --deny warnings
      - run: cargo clippy --all-features --quiet --message-format=json | cargo-action-fmt
        if: failure()
  TestsJob:
    strategy:
      matrix:
        feature: [ "v2", "v3_0", "v3_1" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo tools
      - name: Run tests
        run: cargo llvm-cov nextest --features ${{ matrix.feature }} --no-default-features --no-fail-fast --verbose
      - name: Prepare coverage report
        if: ${{ !cancelled() }}
        run: cargo llvm-cov report --lcov --output-path coverage.lcov
      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  Tests:
    needs: TestsJob
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        if: ${{ needs.TestsJob.result != 'success' }}
        run: exit 1
  Deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo tools
      - name: Machete
        run: cargo machete
      - name: Deny
        run: cargo deny check all
  Publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.5.0
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-targets: false
          cache-all-crates: true
      - run: cargo tools
      - name: Dry run publish
        run: |
          cargo license --all-features --avoid-dev-deps --json > dependencies-license.json
          cargo publish --all-features --allow-dirty --dry-run --verbose
          cargo package --all-features --list --allow-dirty
